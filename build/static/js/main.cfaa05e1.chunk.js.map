{"version":3,"sources":["axios.js","Request.js","Banner.js","Nav.js","Row.js","screens/Homescreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchAactionMovies","fetchComedyMovies","fetchRomanceMovies","fetchHorrorMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","oiginal_name","overview","substr","Nav","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","handleClick","poster_path","id","Homescreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlanScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","store","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfaa05e1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance=axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","//I store my unique api in {process.env.API_KEY}\r\nconst API_KEY = \"478fc6e25cb97f092798ce095aca1e1d\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}& language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}& language=en-US`,\r\n    fetchAactionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, {useEffect, useState} from 'react';\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from './Request';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie]= useState([]);\r\n\r\n    useEffect(() => {\r\n      async function fetchData() {\r\n\r\n        const request=await axios.get(requests.fetchNetflixOriginals);\r\n        setMovie(\r\n            request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]\r\n        );\r\n          return request;\r\n      }\r\n\r\n      fetchData();\r\n    }, []);\r\n\r\n    function truncate (string, n) {\r\n        return string?.length > n ? string.substr(0, n-1) + '...' : string;\r\n    }\r\n    return (\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize: \"cover\",\r\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n            backgroundPosition: \"center center\",\r\n        }}\r\n        >\r\n         \r\n           <div className=\"banner__contents\">\r\n             <h1 className=\"banner__title\">\r\n                 {movie?.title || movie?.name || movie?.oiginal_name}\r\n             </h1>\r\n             <div className=\"banner__buttons\">\r\n                 <button className=\"banner__button\">Play</button>\r\n                 <button className=\"banner__button\">My Wishlist</button>\r\n             </div>\r\n             <h1 className=\"banner__description\">\r\n                 {truncate(movie?.overview,175)}\r\n                 </h1>\r\n             </div>\r\n\r\n             <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n    );\r\n    \r\n}\r\n\r\nexport default Banner;\r\n","import React, {useState, useEffect} from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow]= useState(false);\r\n    const history= useHistory();\r\n\r\n    const transitionNavBar = () => {\r\n        if (window.scrollY > 100)\r\n        {\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar)\r\n        return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n    }, []);\r\n    \r\n    return (\r\n        <div className={'nav ${show && \"nav__black\"}'}>\r\n            <div className='nav__contents'>\r\n            <img\r\n            onClick={() => history.push('/')}\r\n            className='nav__logo'\r\n            src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\r\n            alt=\"\"\r\n            />\r\n\r\n            <img\r\n            onClick={() => history.push('/profile')}\r\n            className='nav__avatar'\r\n            src=\"https://pro2-bar-s3-cdn-cf.myportfolio.com/dddb0c1b4ab622854dd81280840458d3/11718d2f5e7c6e68da3b4959_rw_600.png?h=287f1b3bd0b666897ae600e854a0c251\"\r\n            alt=\"\"\r\n            />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  // A snippet of code which runs based on a specific condition/variable\r\n  useEffect(() => {\r\n    // if [], run once when the row loads, and don't run it again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Banner from '../Banner';\r\nimport './Homescreen.css';\r\nimport Nav from '../Nav';\r\nimport requests from '../Request';\r\nimport Row from '../Row';\r\n\r\nfunction Homescreen() {\r\n    return (\r\n        <div className='homeScreen'>\r\n            {/*NAVBAR FOR THE NETFLIX CLONE*/}\r\n            <Nav />\r\n\r\n             {/*BANNER FOR THE NETFLIX CLONE*/}\r\n            <Banner />\r\n            \r\n            {/*ROW FOR THE NETFLIX CLONE*/}\r\n            <Row\r\n            title=\"NETFLIX ORIGINALS\"\r\n            fetchUrl={requests.fetchNetflixOriginals}\r\n            isLargeRow\r\n            />\r\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchAactionMovies} />\r\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homescreen;\r\n","import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBDePr9_jopeqsIj7nrqMFFrwf16oWELtM\",\r\n    authDomain: \"netflix-80d3e.firebaseapp.com\",\r\n    projectId: \"netflix-80d3e\",\r\n    storageBucket: \"netflix-80d3e.appspot.com\",\r\n    messagingSenderId: \"395088075624\",\r\n    appId: \"1:395088075624:web:ed79b09683315d90ab94dd\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db= firebaseApp.firestore();\r\n  const auth= firebase.auth();\r\n\r\n  export {auth};\r\n  export default db;","import React, {useRef} from 'react';\r\nimport { auth } from '../firebase';\r\nimport \"./SignupScreen.css\";\r\n\r\nfunction SignupScreen() {\r\n    const emailRef= useRef(null);\r\n    const passwordRef= useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n    auth.createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n    )\r\n    .then((authUser) => {\r\n        console.log(authUser);\r\n    })\r\n    .catch((error) => {\r\n        alert (error.message);\r\n    });\r\n};\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n        )\r\n        .then((authUser) => {\r\n            console.log(authUser);\r\n        })\r\n        .catch((error) => {\r\n            alert (error.message);\r\n        });\r\n    };\r\n    return (\r\n        <div className=\"SignupScreen\">\r\n        <form>\r\n            <h1>Sign In</h1>\r\n            <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\r\n            <input ref={passwordRef} placeholder='Password' type=\"password\" />\r\n            <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n            <h4>\r\n                <span className=\"SignupScreen__gray\">New to Netflix? </span>\r\n                <span className=\"SignupScreen__link\"onClick={register}>Sign Up Now.</span>\r\n                </h4>\r\n        </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignupScreen;\r\n","import React, {useState} from 'react';\r\nimport \"./LoginScreen.css\";\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\n    const [signIn, setSignIn] = useState(false);\r\n\r\n    return <div className=\"loginScreen\">\r\n        <div className=\"loginScreeen__background\">\r\n            <img \r\n            className=\"loginScreen__logo\"\r\n            src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" \r\n            alt=\"\" />\r\n\r\n            <button onClick={() => setSignIn(true)}\r\n             className=\"loginScreen__button\">Sign In</button>\r\n\r\n            <div className=\"loginScreen__gradient\" />\r\n            </div>\r\n\r\n            <div className=\"loginScreen__body\">\r\n                {signIn ? (\r\n                    <SignupScreen />\r\n                ) : (\r\n                    <>\r\n                    <h1>Unlimited films, TV Programmes and \r\n                        More.</h1>\r\n                        <h2>Watch anywhere. Cancel at anytime.</h2>\r\n                        <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                       <div className=\"loginScreen__input\">\r\n                           <form>\r\n                               <input type='email'\r\n                               placeholder=\"Email-Address\" />\r\n                               <button\r\n                               onClick= {() => setSignIn(true)} className='loginScreen__getStarted'>GET STARTED</button>\r\n                           </form>\r\n                       </div>\r\n                      \r\n                      </>\r\n              \r\n    \r\n                )}\r\n        </div>\r\n            \r\n        </div>\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  \n  reducers: {\n    login: (state,action) => {\n      state.user=action.payload;\n    },\n    logout: (state) => {\n      state.user=null;\n    },\n    },\n  });\n \n\nexport const { login , logout } = userSlice.actions;\n\n\nexport const selectUser = (state) => state.user.user;\n\n\nexport default userSlice.reducer;\n","import React, {useState , useEffect} from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport db from '../firebase';\r\nimport './PlanScreen.css';\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nfunction PlanScreen() {\r\n    const [products, setProducts]= useState([]);\r\n    const user = useSelector(selectUser);\r\n    const [subscription, setSubscription]= useState(null);\r\n\r\n    useEffect(() => {\r\n        db.collection('customers')\r\n        .doc(user.uid)\r\n        .collection ('subscriptions')\r\n        .get()\r\n        .then(querySnapshot => {\r\n           querySnapshot.forEach(async subscription => {\r\n               setSubscription({\r\n                   role: subscription.data().role,\r\n                   current_period_end: subscription.data().current_period_end.seconds,\r\n                   current_period_start: subscription.data().current_period_start\r\n                   .seconds,\r\n               });\r\n           });\r\n        });\r\n    }, [user.uid]);\r\n\r\n    useEffect(() => {\r\n        db.collection(\"products\")\r\n        .where(\"active\", \"==\", true)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            const products = {};\r\n            querySnapshot.forEach (async (productDoc) => {\r\n                products[productDoc.id]=productDoc.data();\r\n                const priceSnap = await productDoc.ref.collection(\"prices\").get();\r\n                priceSnap.docs.forEach((price) => {\r\n                    products[productDoc.id].prices = {\r\n                        priceId: price.id,\r\n                        priceData: price.data(),\r\n                    };\r\n                });\r\n            });\r\n            setProducts(products);\r\n        });\r\n    }, []);\r\n\r\n    console.log (products);\r\n    console.log (subscription);\r\n    \r\n    const loadCheckout = async (priceId) => {\r\n             const docRef = await db\r\n             .collection('customers')\r\n             .doc(user.uid)\r\n             .collection('checkout_sessions')\r\n             .add({\r\n                 price: priceId,\r\n                 success_url: window.location.origin,\r\n                 cancel_url: window.location.origin,\r\n             });\r\n\r\n             docRef.onSnapshot(async(snap) => {\r\n                 const {error,sessionId} = snap.data();\r\n\r\n                 if (error) {\r\n                     //show error to us customers and\r\n                     //inspect cloud func. logs in firebase console\r\n                     alert (`An error occured: ${error.message}`);\r\n                 }\r\n\r\n                 if (sessionId) {\r\n                     //we have a session, let us redirect to checkout\r\n                     //initialize stripe\r\n                     const stripe = await loadStripe('pk_test_51JIz8eSCxIL74XnMh30n2w4JFCAidi5YfKBZ5w14SNNSdmIuJ2RVC2QIqkWkvopgoGUjmQ38NDGY63DLOOJed7oI00BjA9QRT1');\r\n                    stripe.redirectToCheckout({ sessionId });\r\n                    }\r\n             });\r\n            };\r\n            \r\n    return (\r\n        <div className=\"planScreen\">\r\n            <br/>\r\n            {subscription && (\r\n            <p>\r\n                Renewal Date: {new Date(subscription?.\r\n                current_period_end * 1000\r\n                ).toLocaleDateString()}\r\n                </p>\r\n                )}\r\n            {Object.entries(products).map(([productId, productData]) => {\r\n                //add some logic to check if user subscription is active or not\r\n\r\n                const isCurrentPackage = productData.name\r\n                ?.includes(subscription?.role);\r\n\r\n                return (\r\n                    <div key={productId} className={`${isCurrentPackage && \"planScreen__plan--disabled\"} planScreen__plan`}>\r\n                       <div className=\"planScreen__info\">\r\n                           <h5>{productData.name}</h5>\r\n                           <h6>{productData.description}</h6>\r\n                           </div>\r\n\r\n                          <button \r\n                          onClick={() => \r\n                              !isCurrentPackage && loadCheckout(productData.prices.priceId)\r\n                          }\r\n                          >\r\n                              {isCurrentPackage ? \"CurrentPackage\" : \"Subscribe\"} \r\n                          </button>\r\n                        </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlanScreen;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { auth } from '../firebase';\r\nimport { selectUser } from '../features/userSlice';\r\nimport Nav from '../Nav';\r\nimport \"./ProfileScreen.css\";\r\nimport PlanScreen from './PlanScreen';\r\n\r\nfunction ProfileScreen() {\r\n     const user = useSelector(selectUser);\r\n\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className=\"profileScreen__info\">\r\n                    <img\r\n                    src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/bf6e4a33850498.56ba69ac3064f.png\"\r\n                    alt=\"\" \r\n                    />\r\n\r\n                    <div className=\"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className=\"profileScreen__plans\">\r\n                            <h3>Plans</h3>\r\n\r\n                            <PlanScreen/>\r\n                            \r\n                            <button onClick={() => auth.signOut()}\r\n                            className=\"profileScreen__signOut\">Sign Out</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport Homescreen from './screens/Homescreen';\nimport LoginScreen from './screens/LoginScreen';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login,logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe= auth.onAuthStateChanged((userAuth) => {\n      if (userAuth){\n          //Logged In\n          console.log(userAuth);\n          dispatch(\n            login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          }))\n      }\n      else{\n          //Logged Out\n          dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n  return (\n    <div className=\"app\">\n    <Router>\n      {!user ? (\n        <LoginScreen />\n      ) : (\n        <Switch>\n          <Route path=\"/profile\">\n            <ProfileScreen />\n          </Route>\n        <Route exact path=\"/\">\n        <Homescreen />\n        </Route>\n      </Switch>\n      )}\n       \n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}